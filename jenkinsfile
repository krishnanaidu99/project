pipeline {
    agent any

    environment {
        DOCKER_IMAGE = "your-dockerhub-username/your-django-app" // Replace with your Docker Hub username and app name
        DOCKER_REGISTRY_CREDENTIALS = "docker-credentials-id"    // Jenkins credentials ID for Docker Hub
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "Checking out code from SCM..."
                checkout scm
            }
        }

        stage('Build Docker Image') {
            steps {
                echo "Building Docker image..."
                script {
                    sh "docker build -t ${DOCKER_IMAGE}:latest ."
                }
            }
        }

        stage('Test Application') {
            steps {
                echo "Running tests..."
                script {
                    sh "docker run --rm ${DOCKER_IMAGE}:latest python manage.py test"
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                echo "Pushing Docker image to registry..."
                script {
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin"
                    }
                    sh "docker push ${DOCKER_IMAGE}:latest"
                }
            }
        }

        stage('Deploy Application') {
            steps {
                echo "Deploying the application..."
                script {
                    // Stop and remove the old container if it exists
                    sh "docker rm -f django-app || true"

                    // Run the new container
                    sh """
                    docker run -d --name django-app -p 8000:8000 \
                    ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning up dangling Docker images..."
            script {
                sh "docker image prune -f"
            }
        }
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed. Please check the logs."
        }
    }
}
